package web.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import web.vo.MemberVO;

/**
 * @author icarus
 * 자바웹을 다루는 기술 p.239
 * Member Database Access Object
 */
public class MemberDAO {
	
	private DataSource dataFactory;
	
	public MemberDAO() {
		try {
			Context ctx = new InitialContext();
			Context envContext = (Context) ctx.lookup("java:/comp/env");
			dataFactory = (DataSource)envContext.lookup("jdbc/mariadb");
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * generic 표기법
	 * 내가 원하는 객체를 리스트에 담으려고 확정을 짓기 위해 사용.
	 * 회원의 목록을 가져오는 함수
	 * @return
	 */
	public List<MemberVO> member_list(){
		List<MemberVO> list = new ArrayList<MemberVO>();
		Connection con = null;           // database 연결을 위한 객체
		PreparedStatement pstmt  = null; // SQL 문을 서버로 보내기 위한 객체
		ResultSet rs   = null;           // SQL을 실행하고 결과를 받기 위한 객
		
		try {
			con = dataFactory.getConnection();
			//----------- member를 select해서 MemberVO 객체에 데이터를 담은후 List에 하나씩 추가한다.
			String query = "SELECT * FROM member";
			pstmt = con.prepareStatement(query);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				MemberVO memberVO = new MemberVO();
				
				memberVO.setM_idx(rs.getInt("m_idx"));
				memberVO.setM_name(rs.getString("m_name"));
				memberVO.setM_id(rs.getString("m_id"));
				memberVO.setM_pw(rs.getString("m_pw"));
				memberVO.setM_email(rs.getString("m_email"));
				memberVO.setM_phone(rs.getString("m_phone"));
				memberVO.setM_mdfydate(rs.getTimestamp("m_mdfydate"));
				memberVO.setM_rgstdate(rs.getTimestamp("m_rgstdate"));
				
				list.add(memberVO);
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try {
				rs.close();
				pstmt.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return list;
	}
	
	
	
	public MemberVO member_view(int m_idx) {
		
		Connection con = null;     
		PreparedStatement pstmt  = null; 
		ResultSet rs   = null; 
		MemberVO memberVO= new MemberVO();
		
		try {
			con = dataFactory.getConnection();
			String query = "SELECT * FROM member WHERE m_idx=?";
			pstmt = con.prepareStatement(query);
			pstmt.setInt(1, m_idx);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				memberVO.setM_idx(rs.getInt("m_idx"));
				memberVO.setM_name(rs.getString("m_name"));
				memberVO.setM_id(rs.getString("m_id"));
				memberVO.setM_pw(rs.getString("m_pw"));
				memberVO.setM_email(rs.getString("m_email"));
				memberVO.setM_phone(rs.getString("m_phone"));
				memberVO.setM_mdfydate(rs.getTimestamp("m_mdfydate"));
				memberVO.setM_rgstdate(rs.getTimestamp("m_rgstdate"));
				
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try {
				rs.close();
				pstmt.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return memberVO;
	}
	
	public void member_save(MemberVO memberVO) {
		Connection con = null;     
		PreparedStatement pstmt  = null; 
	

		
		try {
			
			con = dataFactory.getConnection();
			String query = "INSERT INTO  member(m_id, m_pw, m_email, m_phone, m_name) VALUE(?,?,?,?,?) ";
			
			
			pstmt = con.prepareStatement(query);
		
			pstmt.setString(1, memberVO.getM_id());
			pstmt.setString(2, memberVO.getM_pw());
			pstmt.setString(3, memberVO.getM_email());
			pstmt.setString(4, memberVO.getM_phone());
			pstmt.setString(5, memberVO.getM_name());
			pstmt.setString(6, memberVO.getM_file());
			pstmt.executeQuery();

		}catch(Exception e) {
			e.printStackTrace();
				
		}finally {

			try {
		
				pstmt.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	
	public String check_id(String check_id){
		String result="false";
		Connection con = null;     
		PreparedStatement pstmt  = null; 
		ResultSet rs   = null; 
		
		try {
			String query = "SELECT m_idx FROM member WHERE m_id = ?";
			con = dataFactory.getConnection();
			pstmt = con.prepareStatement(query);
			pstmt.setString(1, check_id);
			rs = pstmt.executeQuery();
			
			if(rs.next()){
				result="true";
			}else{
				result="false";
			}
		}catch(Exception e) {
			e.printStackTrace();
				
		}finally {

			try {
				rs.close();
				pstmt.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return result;
	}
	
public MemberVO member_correction(MemberVO memberVO) {
		
		Connection con = null;     
		PreparedStatement pstmt  = null; 

		
		try {
			con = dataFactory.getConnection();
			if(memberVO.getM_pw()==null||memberVO.getM_pw().equals(" ")) {
				String query = "UPDATE member SET m_email=?,m_phone=?, m_name=?,"+" m_mdfydate = now() WHERE m_idx = ?";
				pstmt = con.prepareStatement(query);
				pstmt.setString(1, memberVO.getM_email());
				pstmt.setString(2, memberVO.getM_phone());
				pstmt.setString(3, memberVO.getM_name());
				pstmt.setInt(4, memberVO.getM_idx());
				pstmt.executeUpdate();
		
			}else {
				String query = "UPDATE member SET m_pw=?, m_email=?,m_phone=?, m_name=?, m_mdfydate = now() WHERE m_idx = ?";
				pstmt = con.prepareStatement(query);
				
	
				pstmt.setString(1, memberVO.getM_pw());
				pstmt.setString(2, memberVO.getM_email());
				pstmt.setString(3, memberVO.getM_phone());
				pstmt.setString(4, memberVO.getM_name());
				pstmt.setInt(5, memberVO.getM_idx());
				pstmt.executeUpdate();
		
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try {
			
				pstmt.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return memberVO;
	}

public MemberVO member_delete(int m_idx) {
	// TODO Auto-generated method stub
	Connection con = null;     
	PreparedStatement pstmt  = null; 

	MemberVO memberVO= new MemberVO();
	try {
		con = dataFactory.getConnection();
	
		String query = "DELETE FROM member WHERE m_idx = ?";
		pstmt = con.prepareStatement(query);
		pstmt.setInt(1, m_idx);
		pstmt.executeUpdate();
	
		
	}catch(Exception e) {
		e.printStackTrace();
	}finally{
		try {
		
			pstmt.close();
			con.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return null;
}
	
}


