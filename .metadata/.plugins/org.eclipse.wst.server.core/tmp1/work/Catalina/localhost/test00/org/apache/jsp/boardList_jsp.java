/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2022-02-15 03:31:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.text.SimpleDateFormat;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("    table {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        border-top: 1px solid #444444;\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("    }\r\n");
      out.write("    th, td {\r\n");
      out.write("        border-bottom: 1px solid #444444;\r\n");
      out.write("        padding: 10px;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("function search(){\r\n");
      out.write("    var frm = document.form;\r\n");
      out.write("    \r\n");
      out.write("    //if(frm.searchValue.value == ''){\r\n");
      out.write("        //alert('검색어를 입력해주세요.');\r\n");
      out.write("        //return;\r\n");
      out.write("    //}\r\n");
      out.write("    \r\n");
      out.write("    frm.submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function insert(){\r\n");
      out.write("    location = 'index.html';\r\n");
      out.write("}\r\n");
      out.write("function del(){\r\n");
      out.write("    location = 'deleteForm.html';\r\n");
      out.write("}\r\n");
      out.write("function modi(){\r\n");
      out.write("    location = 'modifyForm.html';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>글 목록</h2>\r\n");
      out.write("	");

		
		ResultSet rs   = null;  
		Class.forName("com.mysql.jdbc.Driver");
		System.out.println("1. Connector 라이브러리 설정 성공 @@");
		//2. db 연결 승인된 사용자 (ip+port, user(root), pw db명(big)) 
		String url = "jdbc:mysql://localhost:3366/board?useUnicode=true&characterEncoding=utf8";
		String user ="root";
		String pass = "1234";
		
		String sql = "SELECT * FROM board ORDER BY idx DESC";
		String searchValue = "";
		if(request.getParameter("searchValue") != null){
		    searchValue = request.getParameter("searchValue");
		}
		try {
		  
		    Connection con=DriverManager.getConnection(url, user, pass);
		
		    //3. PreparedStatement 객체 생성
		    if(request.getParameter("searchValue") != null){
		        sql = "SELECT * FROM border WHERE name LIKE ? ORDER BY idx DESC";
		    }
		    PreparedStatement ps = con.prepareStatement(sql);
		    if(request.getParameter("searchValue") != null){
		        ps.setString(1, "%"+request.getParameter("searchValue")+"%");
		    }
		    rs = ps.executeQuery();
		    
		    SimpleDateFormat format1 = new SimpleDateFormat("yyyy.MM.dd");
	    
      out.write("\r\n");
      out.write("	<form action=\"boardList.jsp\" name=\"form\">\r\n");
      out.write("\r\n");
      out.write("	    검색:<input type=\"text\" name=\"searchValue\">\r\n");
      out.write("	    <input id=\"btn\" type=\"button\" onclick=\"search()\" value=\"검색\">\r\n");
      out.write("	    <input id=\"btn\" type=\"button\" onclick=\"insert()\" value=\"글작성\">\r\n");
      out.write("	    <input id=\"btn\" type=\"button\" onclick=\"del()\" value=\"글 삭제\">\r\n");
      out.write("	    <input id=\"btn\" type=\"button\" onclick=\"modi()\" value=\"글 수정\">\r\n");
      out.write("	 \r\n");
      out.write("	</form>\r\n");
      out.write("	<table>\r\n");
      out.write("	    <tr>\r\n");
      out.write("	        <td>시퀀스</td>\r\n");
      out.write("	        <td>제목</td>\r\n");
      out.write("	        <td>내용</td>\r\n");
      out.write("	        <td>작성자</td>\r\n");
      out.write("	        <td>등록일</td>\r\n");
      out.write("	    <tr>\r\n");
      out.write("	    ");

        while(rs.next()){
    	
      out.write("\r\n");
      out.write("	    <tr>\r\n");
      out.write("		   <td>");
      out.print(rs.getString("idx"));
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print(rs.getString("title"));
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print(rs.getString("content"));
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print(rs.getString("name"));
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print(format1.format(rs.getTimestamp("rgstday")));
      out.write("</td>\r\n");
      out.write("	    <tr>\r\n");
      out.write("	");

        }
    
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
